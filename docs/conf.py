# ======================================================================================
# Copyright (Â©) 2015-2025 LCS - Laboratoire Catalyse et Spectrochimie, Caen, France.
# CeCILL-B FREE SOFTWARE LICENSE AGREEMENT
# See full LICENSE agreement in the root directory.
# ======================================================================================
# ruff: noqa: T201,S603
"""SpectroChemPy documentation build configuration file."""

import inspect
import os
import sys
import warnings
from datetime import datetime
from pathlib import Path

import jinja2

import spectrochempy

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation general, use os.path.abspath to make it absolute, like shown
# here: sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ---------------------------------------------------

# CONSTANTS
PROJECTNAME = "spectrochempy"

# GENERAL PATH
CONFDIR = Path(os.environ.get("SPHINX_CONFDIR", Path(__file__).parent))
TEMPLATES = CONFDIR / "_templates"
STATIC = CONFDIR / "_static"
PROJECT = CONFDIR.parent
BUILDIR = PROJECT / "build"
DOCTREES = BUILDIR / "~doctrees"
HTML = BUILDIR / "html"
SOURCES = Path(os.environ.get("SOURCES", PROJECT / "src" / "spectrochempy"))

# DOCUMENTATION SRC PATH
SRC = Path(os.environ.get("SPHINX_SRCDIR", PROJECT / "docs" / "sources"))
USERGUIDE = SRC / "userguide"
GETTINGSTARTED = SRC / "gettingstarted"
DEVGUIDE = SRC / "devguide"
REFERENCE = SRC / "reference"

# Generated by sphinx
API = REFERENCE / "generated"
DEV_API = DEVGUIDE / "generated"
GALLERY = GETTINGSTARTED / "examples" / "gallery"

# Get sphinx pattern
pattern = os.environ.get("SPHINX_PATTERN")
single_doc_or_dir = pattern is not None and pattern not in ["noapi", "whatsnew"]
include_api = pattern is None or pattern == "whatsnew"

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings.
# They can be extensions coming with Sphinx (named 'sphinx.ext.*') or your
# custom ones.

# Hack to make import
sys._called_from_sphinx = True

# Sphinx Extensions
sys.path.insert(0, str(CONFDIR / "sphinxext"))

extensions = [
    "sphinx_copybutton",
    "sphinx.ext.mathjax",
    "sphinx.ext.autodoc",
    "sphinx.ext.napoleon",
    "sphinx.ext.autosummary",
    "sphinx.ext.githubpages",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.linkcode",
    "sphinx.ext.todo",
    "sphinx_tabs.tabs",
    "matplotlib.sphinxext.plot_directive",
    "IPython.sphinxext.ipython_console_highlighting",
    "IPython.sphinxext.ipython_directive",
    "sphinxcontrib.bibtex",
    "nbsphinx",
    "sphinx.ext.viewcode",
]
if not single_doc_or_dir:
    extensions += [
        "sphinx_gallery.gen_gallery",
    ]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["../_templates", "_templates"]
# for some reason, the templates are not taken into account without specifiying
# twe two locations (it looks like sphinx is looking for the templates relative to the source
# directory instead of the conf.py dir.

# The suffix of source filenames.
source_suffix = ".rst"

# The encoding of source files.
source_encoding = "utf-8"

# The master toctree document.
master_doc = "index"

# General information about the project.

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
version = spectrochempy.application.version
release = version.split("+")[0]
project = f"SpectroChemPy v{version}"
copyright = spectrochempy.application.copyright

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
today_fmt = "%B %d, %Y"

# Disable localization
locale_dirs = []  # empty list disables localization
gettext_compact = False
language = "en"

# The reST default role (used for this markup: `text` ) to use for all
# documents.
default_role = "py:obj"

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = False

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
add_module_names = False

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# Show Todo box
todo_include_todos = True

# This is added to the end of RST files - a good place to put substitutions to
# be used globally.

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "_templates",
    "_static",
    "**.ipynb_checkpoints",
    "~temp",
    "generated",
    "gettingstarted/examples/gallery/**/*.py",
    "gettingstarted/examples/gallery/**/*.ipynb",
    "**.md5",
    "locales",  # ignore locales directory
]

if pattern:
    for path in SRC.rglob("*"):
        if path.suffix in (".rst", ".ipynb"):
            rel_path = path.relative_to(SRC)

            # Skip root index.rst
            if path.name == "index.rst" and path.parent == SRC:
                continue

            # Handle directory builds
            if pattern.startswith("dir:"):
                build_dir = pattern[4:]
                if not str(rel_path).startswith(build_dir):
                    exclude_patterns.append(str(rel_path))
                continue

            # Handle other patterns
            if (
                (
                    pattern == "noapi"
                    and (
                        "generated" in rel_path.parts
                        or (
                            rel_path.parts[0] == "reference"
                            and rel_path.parts[-1] == "index.rst"
                        )
                    )
                )
                or (
                    pattern == "whatsnew"
                    and "generated" not in rel_path.parts
                    and rel_path.parts[0] != "whatsnew"
                )
                or (
                    single_doc_or_dir
                    and str(rel_path) != pattern
                    and rel_path.parts[-1] not in ["glossary.rst", "bibliography.rst"]
                )
            ):
                exclude_patterns.append(str(rel_path))

with open(os.path.join(SRC, "index.rst.tmpl"), encoding="utf-8") as f:
    t = jinja2.Template(f.read())
with open(os.path.join(SRC, "index.rst"), "w", encoding="utf-8") as f:
    f.write(
        t.render(
            include_api=include_api,
            single=single_doc_or_dir,
            pattern=pattern,
        )
    )
# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
html_theme_options = {
    "logo_only": True,
    "collapse_navigation": False,
    "navigation_depth": 5,
    "sticky_navigation": True,
    "prev_next_buttons_location": "both",
}

# Add any paths that contain custom themes here, relative to this directory.

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None
# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "_static/scpy.png"

# The name of an image file (within the _static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/scpy.ico"

# Add any paths that contain custom _static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin _static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = [
    "css/spectrochempy.css",
]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = "%b %d, %Y"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = True

# Don't add .txt suffix to source files:
html_sourcelink_suffix = ""

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# If True remove the flags in doctests
trim_doctests_flags = True

# Remove matplotlib agg warnings from generated doc when using plt.show
warnings.filterwarnings(
    "ignore",
    category=UserWarning,
    message="Matplotlib is currently using agg, which is a"
    " non-GUI backend, so cannot show the figure.",
)

# Check if we are building on GitHub Actions
on_github_actions = os.environ.get("GITHUB_ACTIONS") == "true"
github_repository = os.environ.get("GITHUB_REPOSITORY", "")
root = ""
if on_github_actions:
    print(f"Building on GitHub Actions in repository: {github_repository}")
    root = ""
    if "spectrochempy/spectrochempy" not in github_repository:
        # we are not on the main site so we cannot use  spectrochempy.fr
        root = "/spectrochempy"

# get previous versions and save versions dic them in the versions.json file
# which will be used by versions.js script to display the versions in the sidebar
previous_versions = os.environ.get("PREVIOUS_VERSIONS", "").split(",")
last_release = os.environ.get("LAST_RELEASE", "")

html_context = {
    "current_version": "stable" if ("dev" not in version) else "latest",
    "latest_version": f"{root}/index.html",
    "release": f"{root}/{last_release}/index.html",
    "previous_versions": os.environ.get("PREVIOUS_VERSIONS", "").split(","),  # Added
    # This is for the citing page
    "version": release,
    "bibversion": "{" + release + "}",
    "bibmonth": "{" + f"{datetime.today().month}" + "}",
    "year": f"{datetime.today().year}",
    "bibyear": "{" + f"{datetime.today().year}" + "}",
    "on_github_actions": on_github_actions,
    "github_repository": github_repository,
}

# Sphinx-gallery ---------------------------------------------------------------
# Generate the plots for the gallery
from sphinx_gallery.sorting import FileNameSortKey

example_source_dir = str(SOURCES / "examples")
example_generated_dir = "gettingstarted/examples/gallery"

# Check for the SPHINX_NOEXEC environment variable
noexec = os.environ.get("SPHINX_NOEXEC") == "1"


def _get_default_image_scraper():
    # Return the default image scraper function
    # This is now defined at module level so it can be pickled
    import sphinx_gallery.scrapers

    return sphinx_gallery.scrapers.matplotlib_scraper


if not single_doc_or_dir:
    # generate example only if were are in full doc mode
    sphinx_gallery_conf = {
        "plot_gallery": not noexec,
        "doc_module": "spectrochempy",
        # Source example files in separate directory
        "examples_dirs": [
            f"{example_source_dir}/core",
            f"{example_source_dir}/processing",
            f"{example_source_dir}/analysis",
        ],
        # Generated RST files in generated directory
        "gallery_dirs": [
            f"{example_generated_dir}/auto_examples_core",
            f"{example_generated_dir}/auto_examples_processing",
            f"{example_generated_dir}/auto_examples_analysis",
        ],
        "backreferences_dir": f"{example_generated_dir}/backreferences",
        "reference_url": {
            "spectrochempy": None,
        },
        "show_memory": False,
        "thumbnail_size": (400, 400),
        "abort_on_example_error": False,
        "only_warn_on_example_error": True,
        "capture_repr": ("_repr_html_", "__repr__"),
        "expected_failing_examples": [],
        "download_all_examples": False,
        "pypandoc": True,
        "remove_config_comments": True,
        "within_subsection_order": FileNameSortKey,
        "image_scrapers": (
            _get_default_image_scraper(),
        ),  # Use the function getter instead of direct function reference
        "filename_pattern": "/plot",
        "ignore_pattern": "__init__.py",
        "min_reported_time": 0,
        "show_signature": False,  # Disable the signature if it's causing issues
    }

suppress_warnings = [
    "sphinx_gallery",
    "config.cache",
]

# nbsphinx ---------------------------------------------------------------------

# List of arguments to be passed to the kernel that executes the notebooks:
nbsphinx_execute_arguments = [
    "--InlineBackend.figure_formats={'jpg', 'png'}",
    "--InlineBackend.rc={'figure.dpi': 96}",
]

nbsphinx_exclude_patterns = [
    f"{example_generated_dir}/*",
]

# Execute notebooks before conversion: 'always', 'never', 'auto' (default)
nbsphinx_execute = "never" if noexec else "auto"
nbsphinx_allow_errors = True
nbsphinx_timeout = 90

# Code to be executed before each notebook cell
nbsphinx_prolog = """
"""

# Code to be executed after each notebook cell
nbsphinx_epilog = """
"""

# Use this kernel instead of the one stored in the notebook metadata:
nbsphinx_kernel_name = "python3"

# Support for notebook formats other than .ipynb
nbsphinx_custom_formats = {
    # ".pct.py": ["jupytext.reads", {"fmt": "py:percent"}],
    # ".md": ["jupytext.reads", {"fmt": "Rmd"}],
}

# Configure sphinxcontrib-bibtex

bibtex_bibfiles = ["reference/bibliography.bib"]
bibtex_default_style = "plain"
bibtex_reference_style = "author_year"
bibtex_cite_id = "{key}"

# Configuration for intersphinx --------------------------------------------------------

intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "ipython": ("https://ipython.readthedocs.io/en/stable/", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "SciPy": ("https://docs.scipy.org/doc/scipy/", None),
    "matplotlib": ("https://matplotlib.org/stable/", None),
    "sklearn": ("https://scikit-learn.org/stable/", None),
    "traitlets": ("https://traitlets.readthedocs.io/en/stable/", None),
}

# linkcode -----------------------------------------------------------------------------


def linkcode_resolve(domain, info):
    """Resolve function for the linkcode extension."""

    def find_source():
        """Try to find the file and line number, based on code from numpy."""
        obj = sys.modules[info["module"]]
        for part in info["fullname"].split("."):
            obj = getattr(obj, part)

        fn = inspect.getsourcefile(obj)
        fn = Path(fn).relative_to(Path(spectrochempy.__file__).parent)
        source, lineno = inspect.getsourcelines(obj)
        end_lineno = lineno + len(source) - 1
        if end_lineno >= len(source):
            end_lineno = len(source) - 1
        return fn, lineno, end_lineno

    if domain != "py" or not info["module"]:
        return None
    try:
        fs = find_source()
        filename = "spectrochempy/{}#L{}-L{}".format(*fs)
    except TypeError:
        return None
    except Exception:
        filename = info["module"].replace(".", "/") + ".py"
    tag = "master"
    return f"https://github.com/spectrochempy/spectrochempy/blob/{tag}/{filename}"


# Autosummary --------------------------------------------------------------------------
autosummary_generate = True if include_api else ["index"]

autodoc_typehints = "none"
napoleon_use_param = False
napoleon_use_rtype = False

numpydoc_class_members_toctree = True
numpydoc_show_class_members = False
numpydoc_use_plots = True

autoclass_content = "both"
# Both the classâ and the __init__ methodâs docstring are concatenated and inserted.

autodoc_default_options = {"autosummary": include_api}
autodoc_class_signature = "mixed"
exclusions = (
    "_*",
    "add_traits",
    "class_config_rst_doc",
    "class_config_section",
    "class_get_help",
    "class_own_trait_events",
    "class_own_traits",
    "class_print_help",
    "class_trait_names",
    "class_traits",
    "clear_instance",
    "cross_validation_lock",
    "document_config_options",
    "flatten_flags",
    "generate_config_file",
    "has_trait",
    "hold_trait_notifications",
    "initialize_subcommand",
    "initialized",
    "instance",
    "json_config_loader_class",
    "launch_instance",
    "load_config_file",
    "notify_change",
    "observe",
    "on_trait_change",
    "parse_command_line",
    "print_alias_help",
    "print_description",
    "print_examples",
    "print_flag_help",
    "print_help",
    "print_subcommands",
    "print_version",
    "python_config_loader_class",
    "section_names",
    "set_trait",
    "setup_instance",
    "trait_events",
    "trait_metadata",
    "trait_names",
    "trait",
    "unobserve_all",
    "unobserve",
    "update_config",
    "with_traceback",
)

# Add newline at end of files
rst_epilog = "\n"


def autodoc_skip_member(app, what, name, obj, skip, options):
    """Determine whether to skip a member during autodoc generation."""
    doc = bool(obj.__doc__ is not None and "#NOT_IN_DOC" not in obj.__doc__)

    exclude = name in exclusions or "trait" in name or name.startswith("_") or not doc
    return skip or exclude


def shorter_signature(app, what, name, obj, options, signature, return_annotation):
    """Prevent displaying self in signature."""
    if what == "data":
        signature = "(dataset)"
        what = "function"

    if what not in ("function", "method", "data") or signature is None:
        return None  # removed"class",

    import re

    new_sig = signature

    if inspect.isfunction(obj) or inspect.isclass(obj) or inspect.ismethod(obj):
        sig_obj = obj if not inspect.isclass(obj) else obj.__init__
        sig_re = r"\((self|cls)?,?\s*(.*?)\)\:"
        try:
            new_sig = " ".join(
                re.search(sig_re, inspect.getsource(sig_obj), re.S)
                .group(2)
                .replace("\n", "")
                .split()
            )
            new_sig = "(" + new_sig + ")"

        except Exception:
            print(sig_obj)  # noqa: T201

    return new_sig, return_annotation


def rstjinja(app, docname, source):
    """
    Render our pages as a jinja template for fancy templating goodness.

    Copied from site:
    https://ericholscher.com/blog/2016/jul/25/integrating-jinja-rst-sphinx/
    """
    # Make sure we're outputting HTML
    if app.builder.format != "html":
        return
    src = source[0]
    rendered = app.builder.templates.render_string(src, app.config.html_context)
    source[0] = rendered


def setup(app):
    app.connect("source-read", rstjinja)
    app.connect("autodoc-skip-member", autodoc_skip_member)
    app.connect("autodoc-process-signature", shorter_signature)
    app.add_css_file("css/spectrochempy.css")  # also can be a full URL
