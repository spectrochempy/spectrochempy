
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_processing/denoising/plot_despike.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_processing_denoising_plot_despike.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_processing_denoising_plot_despike.py:


Removing cosmic ray spikes from a Raman spectrum
================================================

In this example, we use the `despike` method to remove the noise from a Raman
spectrum.

.. GENERATED FROM PYTHON SOURCE LINES 14-17

.. code-block:: Python


    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Load the data

.. GENERATED FROM PYTHON SOURCE LINES 19-22

.. code-block:: Python


    dataset = scp.read("ramandata/labspec/serie190214-1.txt")








.. GENERATED FROM PYTHON SOURCE LINES 23-25

Keep only one spectrum in this series
and select the useful region

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: Python


    X = dataset[0, 70.0:]








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Baseline correction the data using the fast ~spectrochempy.snip` algorithm

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: Python


    X1 = X.snip()








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Plot the data

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: Python


    prefs = scp.preferences
    prefs.figure.figsize = (8, 4)
    X1.plot()



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_001.png
   :alt: plot despike
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_001.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-46

Now let's use the `~spectrochempy.despike` method.
Only two parameters needs to be tuned: the `size` of the filter
(actually a Savitsky-Golay filter of order 2), and `delta`, the threshold for the
detection of spikes (outliers).
A spike is detected if its value is greater than `delta` times the standard deviation
of the difference between the original and the smoothed data.

.. GENERATED FROM PYTHON SOURCE LINES 46-50

.. code-block:: Python


    X2 = scp.despike(X1, size=11, delta=5)
    X1.plot()
    X2.plot(clear=False, ls="-", c="r")



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_002.png
   :alt: plot despike
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_002.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 51-53

Another method, 'whitaker', is also available (see the documentation for details):
%%

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: Python

    X3 = scp.despike(X1, size=11, delta=5, method="whitaker")
    X1.plot()
    X3.plot(clear=False, ls="-", c="r")



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_003.png
   :alt: plot despike
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_003.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 57-62

Getting the desired results require the tuning of size and delta parameters.
And sometimes may need to repeat the procedure on a previously filtered spectra.

For example, if size or delta are badly chosen, valid peaks could be removed.
So careful inspection of the results is crucial.

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: Python


    X4 = scp.despike(X1, size=21, delta=2)
    X1.plot()
    X4.plot(clear=False, ls="-", c="r")





.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_004.png
   :alt: plot despike
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/denoising/images/sphx_glr_plot_despike_004.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 69-71

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: Python


    # scp.show()









.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.657 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_processing_denoising_plot_despike.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_despike.ipynb <plot_despike.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_despike.py <plot_despike.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_despike.zip <plot_despike.zip>`
