
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/plot_lstsq_single_equation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_lstsq_single_equation.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_lstsq_single_equation.py:


Solve a linear equation using LSTSQ
===================================

In this example, we find the least  square solution of a simple linear
equation.

.. GENERATED FROM PYTHON SOURCE LINES 15-16

.. code-block:: Python
   :dedent: 1









.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: Python

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 21-26

Let's take a similar example to the one given in the `numpy.linalg`
documentation

We have some noisy data that represent the distance `d` traveled by some
objects versus time `t`:

.. GENERATED FROM PYTHON SOURCE LINES 26-30

.. code-block:: Python


    time = [0, 1, 2, 3]
    distance = [-1, 0.2, 0.9, 2.1]








.. GENERATED FROM PYTHON SOURCE LINES 31-35

### 1) Using arrays (or list) inputs

We would like v and d0 such as
   distance = v.time + d0

.. GENERATED FROM PYTHON SOURCE LINES 35-42

.. code-block:: Python

    lstsq = scp.LSTSQ()
    lstsq.fit(time, distance)
    v = lstsq.coef
    d0 = lstsq.intercept
    rsquare = lstsq.score()
    v, d0, rsquare





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (0.9999999999999997, np.float64(-0.9499999999999995), 0.9900990099009901)



.. GENERATED FROM PYTHON SOURCE LINES 43-45

Plot
(we need to import the matplotlib library)

.. GENERATED FROM PYTHON SOURCE LINES 45-55

.. code-block:: Python

    import matplotlib.pyplot as plt

    plt.plot(time, distance, "o", label="Original data", markersize=5)
    distance_fitted = lstsq.predict()
    plt.plot(time, distance_fitted, ":r", label="Linear regression output")
    plt.xlabel("time / h")
    plt.ylabel("distance / km")
    plt.title(f"Linear regression, $R^2={rsquare:.3f}$")
    plt.legend()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_001.png
   :alt: Linear regression, $R^2=0.990$
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f011ee99e40>



.. GENERATED FROM PYTHON SOURCE LINES 56-61

### 2) Using NDDataset as input for X and Y

Using NDDataset as input offer the straightforward possibility to use metadata
such as units in the calculation and coordset


.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python

    time = scp.NDDataset([0, 1, 2, 3], title="time", units="hour")
    distance = scp.NDDataset([-1, 0.2, 0.9, 2.1], title="distance", units="kilometer")








.. GENERATED FROM PYTHON SOURCE LINES 65-66

we fit it using the new defined time and distance NDDatasets

.. GENERATED FROM PYTHON SOURCE LINES 66-75

.. code-block:: Python

    lstsq = scp.LSTSQ()
    lstsq.fit(time, distance)

    # The results are the same as previously (but with units information)
    v = lstsq.coef
    d0 = lstsq.intercept
    rsquare = lstsq.score()
    print(f"speed : {v: .2f},  d0 : {d0: .2f},  r^2={rsquare: .3f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    speed :  1.00 kilometer hour^-1,  d0 : -0.95 kilometer,  r^2= 0.990




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Predict return a NDDataset since the inputs were NDDatasets

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: Python

    distance_fitted2 = lstsq.predict()
    print(distance_fitted2)

    assert (distance_fitted == distance_fitted2.data).all()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NDDataset: [float64] km (size: 4)




.. GENERATED FROM PYTHON SOURCE LINES 83-88

### 3) Using a single NDDataset with X coordinates as input

Using NDDataset as input offer the straightforward possibility to use the X coordinate
directly, ie., we use lstsq.fit(Y) with Y.x = X, instead of lstsq.fit(X, Y)


.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: Python

    time = scp.Coord([0, 1, 2, 3], title="time", units="hour")
    distance = scp.NDDataset(
        data=[-1, 0.2, 0.9, 2.1], coordset=[time], title="distance", units="kilometer"
    )








.. GENERATED FROM PYTHON SOURCE LINES 94-97

Now we fit the model,
but here we just need to pass the distance dataset as argument.
The time information being the x coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 97-106

.. code-block:: Python

    lstsq = scp.LSTSQ()
    lstsq.fit(distance)

    # The results are the same as previously.
    v = lstsq.coef
    d0 = lstsq.intercept
    rsquare = lstsq.score()
    print(f"speed : {v:.2f~C},  d0 : {d0:.2f~C},  r^2={rsquare:.3f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    speed : 1.00 km*h**-1,  d0 : -0.95 km,  r^2=0.990




.. GENERATED FROM PYTHON SOURCE LINES 107-108

Final plot

.. GENERATED FROM PYTHON SOURCE LINES 108-118

.. code-block:: Python

    distance.plot_scatter(
        markersize=10,
        mfc="red",
        mec="black",
        label="Original data",
        title=f"Least-square regression, $r^2={rsquare:.3f}$",
    )
    distance_fitted3 = lstsq.predict()
    distance_fitted3.plot_pen(clear=False, color="g", label="Fitted line", legend=True)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_002.png
   :alt: Least-square regression, $r^2=0.990$
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_002.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 119-121

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 121-123

.. code-block:: Python


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.285 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_lstsq_single_equation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_lstsq_single_equation.ipynb <plot_lstsq_single_equation.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_lstsq_single_equation.py <plot_lstsq_single_equation.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_lstsq_single_equation.zip <plot_lstsq_single_equation.zip>`
