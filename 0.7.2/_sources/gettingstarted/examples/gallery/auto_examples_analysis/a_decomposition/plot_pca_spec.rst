
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/plot_pca_spec.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_pca_spec.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_pca_spec.py:


PCA analysis example
--------------------
In this example, we perform the PCA dimensionality reduction of a spectra
dataset

.. GENERATED FROM PYTHON SOURCE LINES 16-17

Import the spectrochempy API package

.. GENERATED FROM PYTHON SOURCE LINES 17-19

.. code-block:: Python

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 20-21

Load a dataset

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    dataset = scp.read_omnic("irdata/nh4y-activation.spg")[::5]
    print(dataset)
    dataset.plot()



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_001.png
   :alt: plot pca spec
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NDDataset: [float64] a.u. (shape: (y:11, x:5549))


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 25-27

Create a PCA object and fit the dataset so that the explained variance is greater or
equal to 99.9%

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: Python

    pca = scp.PCA(n_components=0.999)
    pca.fit(dataset)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <spectrochempy.analysis.decomposition.pca.PCA object at 0x7f00f65bf340>



.. GENERATED FROM PYTHON SOURCE LINES 31-33

The number of fitted components is given by the n_components attribute
(We obtain 23 components)

.. GENERATED FROM PYTHON SOURCE LINES 33-35

.. code-block:: Python

    pca.n_components





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    6



.. GENERATED FROM PYTHON SOURCE LINES 36-37

Transform the dataset to a lower dimensionality using all the fitted components

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python

    scores = pca.transform()
    scores






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div class='scp-output'><details><summary>NDDataset: [float64] unitless (shape: (y:11, k:6))[nh4y-activation_PCA.transform]</summary><div class="scp-output section"><details><summary>Summary</summary>
    <div class="scp-output section"><div class="attr-name">         name</div><div>:</div><div class="attr-value"> nh4y-activation_PCA.transform</div></div>
    <div class="scp-output section"><div class="attr-name">       author</div><div>:</div><div class="attr-value"> runner@fv-az1696-90</div></div>
    <div class="scp-output section"><div class="attr-name">      created</div><div>:</div><div class="attr-value"> 2025-03-09 01:15:39+00:00</div></div>
    <div class="scp-output section"><div class="attr-name">      history</div><div>:</div><div class="attr-value"> <div>2025-03-09 01:15:39+00:00> Created using method PCA.transform</div></div></div></details></div>
    <div class="scp-output section"><details><summary>          Data </summary>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> <untitled></div></div>
    <div class="scp-output section"><div class="attr-name">       values</div><div>:</div><div class="attr-value"> ... </div></div>
    <div class='numeric'>         [[   71.56   -16.87 ... -0.006776    0.216]<br/>          [   50.39    8.205 ...   0.5566 -0.03804]<br/>          ...<br/>          [  -26.25   -1.694 ...   0.1281   0.6077]<br/>          [  -25.46   -1.456 ...    4.175  -0.7883]]</div>
    <div class="scp-output section"><div class="attr-name">        shape</div><div>:</div><div class="attr-value"> (y:11, k:6)</div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `k`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 6</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> components</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  #0   #1   #2   #3   #4   #5]</div> </div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `y`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 11</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> acquisition timestamp (GMT)</div></div>
    <div class="scp-output section"><div class="attr-name">  coordinates</div><div>:</div><div class="attr-value"> <div class='numeric'>[1.468e+09 1.468e+09 ... 1.468e+09 1.468e+09] s</div></div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> ... </div></div>
    <div class='label'>         [[  2016-07-06 19:03:14+00:00   2016-07-06 19:53:14+00:00 ...   2016-07-07 02:43:15+00:00   2016-07-07 03:33:17+00:00]<br/>          [  vz0466.spa, Wed Jul 06 21:00:38 2016 (GMT+02:00)   vz0471.spa, Wed Jul 06 21:50:37 2016 (GMT+02:00) ...<br/>             vz0512.spa, Thu Jul 07 04:40:39 2016 (GMT+02:00)   vz0517.spa, Thu Jul 07 05:30:41 2016 (GMT+02:00)]]</div></details></div></details></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 41-43

Finally, display the results graphically
ScreePlot

.. GENERATED FROM PYTHON SOURCE LINES 43-44

.. code-block:: Python

    pca.screeplot()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_002.png
         :alt: Scree plot
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_003.png
         :alt: plot pca spec
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Matplotlib Axes object>, <Axes: xlabel='components $\\mathrm{}$', ylabel='cumulative explained variance $\\mathrm{/\\ \\mathrm{\\%}}$'>)



.. GENERATED FROM PYTHON SOURCE LINES 45-46

Score Plot

.. GENERATED FROM PYTHON SOURCE LINES 46-47

.. code-block:: Python

    pca.scoreplot(scores, 1, 2)



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_004.png
   :alt: Score plot
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Score plot'}, xlabel='PC# 1 (94.121%)', ylabel='PC# 2 (4.103%)'>



.. GENERATED FROM PYTHON SOURCE LINES 48-49

Score Plot for 3 PC's in 3D

.. GENERATED FROM PYTHON SOURCE LINES 49-50

.. code-block:: Python

    pca.scoreplot(scores, 1, 2, 3)



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_005.png
   :alt: Score plot
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes3D: title={'center': 'Score plot'}, xlabel='PC# 1 (94.121%)', ylabel='PC# 2 (4.103%)', zlabel='PC# 3 (0.980%)'>



.. GENERATED FROM PYTHON SOURCE LINES 51-52

Displays 4 loadings

.. GENERATED FROM PYTHON SOURCE LINES 52-53

.. code-block:: Python

    pca.loadings[:4].plot(legend=True)



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_006.png
   :alt: plot pca spec
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_006.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 54-55

Here we do a masking of the saturated region between 882 and 1280 cm^-1

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: Python

    dataset[
        :, 882.0:1280.0
    ] = scp.MASKED  # remember: use float numbers for slicing (not integer)
    dataset.plot()



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_007.png
   :alt: plot pca spec
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_007.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 60-61

Apply the PCA model

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: Python

    pca = scp.PCA(n_components=0.999)
    pca.fit(dataset)
    pca.n_components





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 66-68

As seen above, now only 4 components instead of 23 are necessary to 99.9% of
explained variance.

.. GENERATED FROM PYTHON SOURCE LINES 68-69

.. code-block:: Python

    pca.screeplot()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_008.png
         :alt: Scree plot
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_008.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_009.png
         :alt: plot pca spec
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_009.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Matplotlib Axes object>, <Axes: xlabel='components $\\mathrm{}$', ylabel='cumulative explained variance $\\mathrm{/\\ \\mathrm{\\%}}$'>)



.. GENERATED FROM PYTHON SOURCE LINES 70-71

Displays the loadings

.. GENERATED FROM PYTHON SOURCE LINES 71-72

.. code-block:: Python

    pca.loadings.plot(legend=True)



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_010.png
   :alt: plot pca spec
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_010.png
   :class: sphx-glr-single-img



.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 73-74

Let's plot the scores

.. GENERATED FROM PYTHON SOURCE LINES 74-76

.. code-block:: Python

    scores = pca.transform()
    pca.scoreplot(scores, 1, 2)



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_011.png
   :alt: Score plot
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_011.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Score plot'}, xlabel='PC# 1 (96.453%)', ylabel='PC# 2 (3.140%)'>



.. GENERATED FROM PYTHON SOURCE LINES 77-80

Labeling scoreplot with spectra labels
Our dataset has already two columns of labels for the spectra but there are little
too long for display on plots.

.. GENERATED FROM PYTHON SOURCE LINES 80-82

.. code-block:: Python

    scores.y.labels





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[  2016-07-06 19:03:14+00:00,   vz0466.spa, Wed Jul 06 21:00:38 2016 (GMT+02:00)],
           [  2016-07-06 19:53:14+00:00,   vz0471.spa, Wed Jul 06 21:50:37 2016 (GMT+02:00)],
           ...,
           [  2016-07-07 02:43:15+00:00,   vz0512.spa, Thu Jul 07 04:40:39 2016 (GMT+02:00)],
           [  2016-07-07 03:33:17+00:00,   vz0517.spa, Thu Jul 07 05:30:41 2016 (GMT+02:00)]], dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 83-84

So we define some short labels for each component, and add them as a third column:

.. GENERATED FROM PYTHON SOURCE LINES 84-88

.. code-block:: Python

    labels = [lab[:6] for lab in dataset.y.labels[:, 1]]
    scores.y.labels = labels  # Note this does not replace previous labels,
    # but adds a column.








.. GENERATED FROM PYTHON SOURCE LINES 89-90

now display thse

.. GENERATED FROM PYTHON SOURCE LINES 90-92

.. code-block:: Python

    pca.scoreplot(scores, 1, 2, show_labels=True, labels_column=2)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_012.png
   :alt: Score plot
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_spec_012.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Score plot'}, xlabel='PC# 1 (96.453%)', ylabel='PC# 2 (3.140%)'>



.. GENERATED FROM PYTHON SOURCE LINES 93-95

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.539 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_pca_spec.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_pca_spec.ipynb <plot_pca_spec.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_pca_spec.py <plot_pca_spec.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_pca_spec.zip <plot_pca_spec.zip>`
