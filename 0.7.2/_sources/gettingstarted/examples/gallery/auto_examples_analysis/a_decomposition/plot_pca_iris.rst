
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/plot_pca_iris.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_pca_iris.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_pca_iris.py:


PCA example (iris dataset)
--------------------------
In this example, we perform the PCA dimensionality reduction of the classical `iris`
dataset (Ronald A. Fisher.
"The Use of Multiple Measurements in Taxonomic Problems. Annals of Eugenics, 7, pp.179-188, 1936).

.. GENERATED FROM PYTHON SOURCE LINES 17-18

First we laod the spectrochempy API package

.. GENERATED FROM PYTHON SOURCE LINES 18-20

.. code-block:: Python

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 21-22

load a dataset from scikit-learn

.. GENERATED FROM PYTHON SOURCE LINES 22-24

.. code-block:: Python

    dataset = scp.load_iris()








.. GENERATED FROM PYTHON SOURCE LINES 25-29

Create a PCA object
Here, the number of components  wich is used by the model is automatically determined
using `n_components="mle"`\. Warning: `mle` cannot be used when
n_observations < n_features.

.. GENERATED FROM PYTHON SOURCE LINES 29-30

.. code-block:: Python

    pca = scp.PCA(n_components="mle")







.. GENERATED FROM PYTHON SOURCE LINES 31-32

Fit dataset with the PCA model

.. GENERATED FROM PYTHON SOURCE LINES 32-33

.. code-block:: Python

    pca.fit(dataset)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <spectrochempy.analysis.decomposition.pca.PCA object at 0x7f011f294550>



.. GENERATED FROM PYTHON SOURCE LINES 34-35

The number of components found is 3:

.. GENERATED FROM PYTHON SOURCE LINES 35-36

.. code-block:: Python

    pca.n_components




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    3



.. GENERATED FROM PYTHON SOURCE LINES 37-38

It explain 99.5 % of the variance

.. GENERATED FROM PYTHON SOURCE LINES 38-39

.. code-block:: Python

    pca.cumulative_explained_variance[-1].value





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    99.47878161267252 %
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-43

We can also specify the amount of explained variance to compute how much components
are needed (a number between 0 and 1 for n_components is required to do this).
we found 4 components in this case

.. GENERATED FROM PYTHON SOURCE LINES 43-46

.. code-block:: Python

    pca = scp.PCA(n_components=0.999)
    pca.fit(dataset)
    pca.n_components




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    4



.. GENERATED FROM PYTHON SOURCE LINES 47-49

the 4 components found are in the `components` attribute of pca. These components are
often called loadings in PCA analysis.

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: Python

    loadings = pca.components
    loadings





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div class='scp-output'><details><summary>NDDataset: [float64] unitless (shape: (k:4, x:4))[`IRIS` Dataset_PCA.components]</summary><div class="scp-output section"><details><summary>Summary</summary>
    <div class="scp-output section"><div class="attr-name">         name</div><div>:</div><div class="attr-value"> `IRIS` Dataset_PCA.components</div></div>
    <div class="scp-output section"><div class="attr-name">       author</div><div>:</div><div class="attr-value"> runner@fv-az1696-90</div></div>
    <div class="scp-output section"><div class="attr-name">      created</div><div>:</div><div class="attr-value"> 2025-03-09 01:15:37+00:00</div></div>
    <div class="scp-output section"><div class="attr-name">      history</div><div>:</div><div class="attr-value"> <div>2025-03-09 01:15:37+00:00> Created using method PCA.components</div></div></div></details></div>
    <div class="scp-output section"><details><summary>          Data </summary>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> size</div></div>
    <div class="scp-output section"><div class="attr-name">       values</div><div>:</div><div class="attr-value"> ... </div></div>
    <div class='numeric'>         [[  0.3614 -0.08452   0.8567   0.3583]<br/>          [  0.6566   0.7302  -0.1734 -0.07548]<br/>          [  -0.582   0.5979  0.07624   0.5458]<br/>          [  0.3155  -0.3197  -0.4798   0.7537]]</div>
    <div class="scp-output section"><div class="attr-name">        shape</div><div>:</div><div class="attr-value"> (k:4, x:4)</div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `k`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 4</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> components</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  #0   #1   #2   #3]</div> </div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `x`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 4</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> features</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  sepal_length   sepal width   petal_length   petal_width]</div></div></div></details></div></details></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 52-54

Note: it is equivalently possible to use the `loadings` attribute of pca, which
produce the same results.

.. GENERATED FROM PYTHON SOURCE LINES 54-55

.. code-block:: Python

    pca.loadings





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div class='scp-output'><details><summary>NDDataset: [float64] unitless (shape: (k:4, x:4))[`IRIS` Dataset_PCA.get_components]</summary><div class="scp-output section"><details><summary>Summary</summary>
    <div class="scp-output section"><div class="attr-name">         name</div><div>:</div><div class="attr-value"> `IRIS` Dataset_PCA.get_components</div></div>
    <div class="scp-output section"><div class="attr-name">       author</div><div>:</div><div class="attr-value"> runner@fv-az1696-90</div></div>
    <div class="scp-output section"><div class="attr-name">      created</div><div>:</div><div class="attr-value"> 2025-03-09 01:15:37+00:00</div></div>
    <div class="scp-output section"><div class="attr-name">      history</div><div>:</div><div class="attr-value"> <div>2025-03-09 01:15:37+00:00> Created using method PCA.get_components</div></div></div></details></div>
    <div class="scp-output section"><details><summary>          Data </summary>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> <untitled></div></div>
    <div class="scp-output section"><div class="attr-name">       values</div><div>:</div><div class="attr-value"> ... </div></div>
    <div class='numeric'>         [[  0.3614 -0.08452   0.8567   0.3583]<br/>          [  0.6566   0.7302  -0.1734 -0.07548]<br/>          [  -0.582   0.5979  0.07624   0.5458]<br/>          [  0.3155  -0.3197  -0.4798   0.7537]]</div>
    <div class="scp-output section"><div class="attr-name">        shape</div><div>:</div><div class="attr-value"> (k:4, x:4)</div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `k`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 4</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> components</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  #0   #1   #2   #3]</div> </div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `x`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 4</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> features</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  sepal_length   sepal width   petal_length   petal_width]</div></div></div></details></div></details></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 56-58

To Reduce the data to a lower dimensionality using these three components, we use the
transform methods. The results is often called `scores` for PCA analysis.

.. GENERATED FROM PYTHON SOURCE LINES 58-60

.. code-block:: Python

    scores = pca.transform()
    scores





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div class='scp-output'><details><summary>NDDataset: [float64] unitless (shape: (y:150, k:4))[`IRIS` Dataset_PCA.transform]</summary><div class="scp-output section"><details><summary>Summary</summary>
    <div class="scp-output section"><div class="attr-name">         name</div><div>:</div><div class="attr-value"> `IRIS` Dataset_PCA.transform</div></div>
    <div class="scp-output section"><div class="attr-name">       author</div><div>:</div><div class="attr-value"> runner@fv-az1696-90</div></div>
    <div class="scp-output section"><div class="attr-name">      created</div><div>:</div><div class="attr-value"> 2025-03-09 01:15:37+00:00</div></div>
    <div class="scp-output section"><div class="attr-name">      history</div><div>:</div><div class="attr-value"> <div>2025-03-09 01:15:37+00:00> Created using method PCA.transform</div></div></div></details></div>
    <div class="scp-output section"><details><summary>          Data </summary>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> <untitled></div></div>
    <div class="scp-output section"><div class="attr-name">       values</div><div>:</div><div class="attr-value"> ... </div></div>
    <div class='numeric'>         [[  -2.684   0.3194 -0.02791 0.002262]<br/>          [  -2.714   -0.177  -0.2105  0.09903]<br/>          ...<br/>          [   1.901   0.1166   0.7233   0.0446]<br/>          [    1.39  -0.2827   0.3629   -0.155]]</div>
    <div class="scp-output section"><div class="attr-name">        shape</div><div>:</div><div class="attr-value"> (y:150, k:4)</div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `k`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 4</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> components</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  #0   #1   #2   #3]</div> </div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `y`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 150</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> samples</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  setosa   setosa ...   virginica   virginica]</div></div></div></details></div></details></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 61-62

Again, we can also use the `scores` attribute to get this results

.. GENERATED FROM PYTHON SOURCE LINES 62-64

.. code-block:: Python

    scores = pca.scores
    scores





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div class='scp-output'><details><summary>NDDataset: [float64] unitless (shape: (y:150, k:4))[`IRIS` Dataset_PCA.transform]</summary><div class="scp-output section"><details><summary>Summary</summary>
    <div class="scp-output section"><div class="attr-name">         name</div><div>:</div><div class="attr-value"> `IRIS` Dataset_PCA.transform</div></div>
    <div class="scp-output section"><div class="attr-name">       author</div><div>:</div><div class="attr-value"> runner@fv-az1696-90</div></div>
    <div class="scp-output section"><div class="attr-name">      created</div><div>:</div><div class="attr-value"> 2025-03-09 01:15:37+00:00</div></div>
    <div class="scp-output section"><div class="attr-name">      history</div><div>:</div><div class="attr-value"> <div>2025-03-09 01:15:37+00:00> Created using method PCA.transform</div></div></div></details></div>
    <div class="scp-output section"><details><summary>          Data </summary>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> <untitled></div></div>
    <div class="scp-output section"><div class="attr-name">       values</div><div>:</div><div class="attr-value"> ... </div></div>
    <div class='numeric'>         [[  -2.684   0.3194 -0.02791 0.002262]<br/>          [  -2.714   -0.177  -0.2105  0.09903]<br/>          ...<br/>          [   1.901   0.1166   0.7233   0.0446]<br/>          [    1.39  -0.2827   0.3629   -0.155]]</div>
    <div class="scp-output section"><div class="attr-name">        shape</div><div>:</div><div class="attr-value"> (y:150, k:4)</div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `k`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 4</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> components</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  #0   #1   #2   #3]</div> </div></div></details></div>
    <div class="scp-output section"><details><summary>     Dimension `y`</summary>
    <div class="scp-output section"><div class="attr-name">         size</div><div>:</div><div class="attr-value"> 150</div></div>
    <div class="scp-output section"><div class="attr-name">        title</div><div>:</div><div class="attr-value"> samples</div></div>
    <div class="scp-output section"><div class="attr-name">       labels</div><div>:</div><div class="attr-value"> <div class='label'>[  setosa   setosa ...   virginica   virginica]</div></div></div></details></div></details></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-68

The figures of merit (explained and cumulative variance) confirm that
these 4 PC's explain 100% of the variance:


.. GENERATED FROM PYTHON SOURCE LINES 68-69

.. code-block:: Python

    pca.printev()







.. GENERATED FROM PYTHON SOURCE LINES 70-73

These figures of merit can also be displayed graphically

The ScreePlot

.. GENERATED FROM PYTHON SOURCE LINES 73-74

.. code-block:: Python

    pca.screeplot()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_001.png
         :alt: Scree plot
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_002.png
         :alt: plot pca iris
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_002.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    (<Matplotlib Axes object>, <Axes: xlabel='components $\\mathrm{}$', ylabel='cumulative explained variance $\\mathrm{/\\ \\mathrm{\\%}}$'>)



.. GENERATED FROM PYTHON SOURCE LINES 75-79

The score plots can be used for classification purposes. The first one - in 2D for the
2 first PC's - shows that the first PC allows distinguishing Iris-setosa (score of
PC#1 < -1) from other species (score of PC#1 > -1), while more PC's are required
to distinguish versicolor from viginica.

.. GENERATED FROM PYTHON SOURCE LINES 79-80

.. code-block:: Python

    pca.scoreplot(scores, 1, 2, color_mapping="labels")



.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_003.png
   :alt: Score plot
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'Score plot'}, xlabel='PC# 1 (92.462%)', ylabel='PC# 2 (5.307%)'>



.. GENERATED FROM PYTHON SOURCE LINES 81-83

The second one - in 3D for the 3 first PC's - indicates that a thid PC won't allow
better distinguishing versicolor from viginica.

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: Python

    ax = pca.scoreplot(scores, 1, 2, 3, color_mapping="labels")
    ax.view_init(10, 75)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_004.png
   :alt: Score plot
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_pca_iris_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 87-89

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: Python


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.584 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_pca_iris.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_pca_iris.ipynb <plot_pca_iris.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_pca_iris.py <plot_pca_iris.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_pca_iris.zip <plot_pca_iris.zip>`
