name: Test, Build and Publish package

on:
  push:
    branches:
      - develop
      - feature/workflow
  pull_request:
    branches:
      - master
  release:
    types:
      - created

jobs:

  # Job 1
  create-env-files:

    name: Create environment yaml files for python ${{ matrix.pythonVersion }}

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create artifact directory
        run: |
          mkdir -p artifact

      - name: Install miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ""
          auto-activate-base: true
          auto-update-conda: true

      - name: Install dependency
        run: |
          conda install jinja2

      - name: Create environment scpy3.7
        run: |
          python .ci/env/env_create.py -v 3.7 --dev scpy3.7.yml
          mv .ci/env/scpy3.7.yml artifact/scpy3.7.yml

      - name: Create environment scpy3.8
        run: |
          python .ci/env/env_create.py -v 3.8 --dev scpy3.8.yml
          mv .ci/env/scpy3.8.yml artifact/scpy3.8.yml

      - name: Create environment scpy3.9
        run: |
          python .ci/env/env_create.py -v 3.9 --dev scpy3.9.yml
          mv .ci/env/scpy3.9.yml artifact/scpy3.9.yml

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: env-artifact
          path: artifact

  # Job 2  (only for non release)
  test-package:

    if: ${{ github.ref != ‘refs/release’ }}

    name: Test using ${{ matrix.os }} and python ${{ matrix.pythonVersion }}

    needs: create-env-files

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        pythonVersion: [3.7, 3.8, 3.9]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: env-artifact

      - name: Install miniconda (scpy${{ matrix.pythonVersion }})
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: scpy${{ matrix.pythonVersion }}
          environment-file: scpy${{ matrix.pythonVersion }}.yml
          condarc-file: .ci/env/condarc.yml
          auto-activate-base: false

      - name: Install spectrochempy
        run: |
          python setup.py install

      - name: Lint with flake8
        run: flake8 .

      - name: Test with pytest
        run: pytest tests

  # Job 3
  build-package:

    name: Build package for python ${{ matrix.pythonVersion }} (noarch)

    needs: test-package

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest]
        pythonVersion: [3.7, 3.8, 3.9]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: env-artifact

      - name: Install miniconda (scpy${{ matrix.pythonVersion }})
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: scpy${{ matrix.pythonVersion }}
          environment-file: scpy${{ matrix.pythonVersion }}.yml
          condarc-file: .ci/env/condarc.yml
          auto-activate-base: false

      - name: Install spectrochempy
        run: |
          python setup.py install

      - name: Set up version environment variable
        run: |
          ## get version string from setuptools_scm
          PVS="$(python setup.py --version)"
          echo "Current version string = $PVS"

          ## Extract components
          IFS=$"+"
          read -ra arr <<< "$PVS"

          ## latest version string
          LATEST="${arr[0]}"
          IFS=$"."
          read -ra tag <<< "$LATEST";
          DEVSTRING="${tag[3]}"
          VERSION="${tag[0]}.${tag[1]}.${tag[2]}"
          if [[ -z $DEVSTRING ]]; then
            DEVSTRING="stable"
          fi

          ## Export variable in the github environment
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DEVSTRING=$DEVSTRING" >> $GITHUB_ENV

          echo "$VERSION"
          echo "$DEVSTRING"

      - name: Build package
        run: |
          conda install conda-build conda-verify
          conda-build .conda --output-folder out-${{ matrix.os }}-${{ matrix.pythonVersion }}

      - name: Publish package for release
        if: contains(env.DEVSTRING, 'stable')
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_UPLOAD_TOKEN }}
        run: |
          conda install anaconda-client
          anaconda upload --force out-${{ matrix.os }}-${{ matrix.pythonVersion }}/*/*.tar.bz2
          rm out-${{ matrix.os }}-${{ matrix.pythonVersion }}/*/*.tar.bz2

      - name: Publish development package
        if: "!(contains(env.DEVSTRING, 'stable'))"
        env:
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_UPLOAD_TOKEN }}
        run: |
          conda install anaconda-client
          anaconda upload -l dev --force out-${{ matrix.os }}-${{ matrix.pythonVersion }}/*/*.tar.bz2
          rm out-${{ matrix.os }}-${{ matrix.pythonVersion }}/*/*.tar.bz2
