# This workflow tests if SpectrochemPy can be installed and run in a Google Colab environment
# It uses Docker to simulate the Colab environment locally on GitHub's servers

name: Test Colab Notebook

# Define when this workflow should run
on:
  push:
    branches:
      - develop
      - feature/*
      - fix/*
  pull_request:
  workflow_dispatch:  # Allows manual trigger from GitHub UI

permissions:
  contents: read
  id-token: write

# Prevent multiple copies of this workflow from running simultaneously
# This saves resources and prevents conflicts
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test notebook in Colab environment
    runs-on: ubuntu-latest  # Use Ubuntu as our base system

    steps:
      # Step 1: Free up space on the GitHub runner
      - name: Maximize disc space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      # Step 2: Get our code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 3: Set up Docker build system with caching support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Cache Docker images to speed up subsequent runs
      - name: Cache Docker images
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 5: Cache pip packages to speed up installation
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 6: Download the official Google Colab Docker image
      # This image contains the same environment as Google Colab
      - name: Pull Colab image
        run: docker pull europe-docker.pkg.dev/colab-images/public/runtime:latest

      # Step 7: Create test script
      - name: Create test script
        run: |
          cat << EOF > test_install.py
          import sys
          import subprocess

          def install_package(path):
              # Install requirements
              requirements = f"{path}/requirements/requirements.txt"
              subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "-r", requirements])
              # Install spectrochempy
              subprocess.check_call([sys.executable, "-m", "pip", "install", "-q", "--no-deps", path])
              print("Installation completed")

          def test_functionality():
              # Only import after installation
              import spectrochempy as scp
              # Test basic functionality
              ds = scp.NDDataset([1, 2, 3])
              assert ds.shape == (3,), "Dataset shape mismatch"
              print("Basic functionality test passed")

          if __name__ == "__main__":
              workspace_dir = "/workspace"
              install_package(workspace_dir)
              test_functionality()
          EOF

      # Step 8: Run the test script in the Colab environment
      - name: Run test script in Colab environment
        run: |
          # Create pip cache directory
          mkdir -p ~/.cache/pip
          chmod -R 777 ~/.cache/pip  # Ensure proper permissions

          # Start the Colab container with pip cache mounted
          docker run --rm -d \
            -p 8888:8888 \
            -v ${{ github.workspace }}:/workspace \
            -v ~/.cache/pip:/root/.cache/pip \
            --name colab_container \
            europe-docker.pkg.dev/colab-images/public/runtime:latest

          # Wait for Jupyter to start
          sleep 10

          # Install required tools in the container
          docker exec colab_container \
            pip install -q ipykernel

          # Execute the test script
          docker exec colab_container \
            python3 /workspace/test_install.py

          # Stop container
          docker stop colab_container

      # Step 9: Save the results
      - name: Upload notebook results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: notebook-output
          path: |
            output.ipynb
            test_install.py
