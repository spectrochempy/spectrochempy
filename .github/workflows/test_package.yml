name: ðŸ”¬ Tests

on:
  push:

    branches:
      - develop
      - master

  pull_request:

  workflow_dispatch:

jobs:

  # Job 1
  create-env-files:

    name: Create environment yaml files

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create artifact directory
        run: |
          mkdir -p artifact

      - name: Install miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ""
          auto-activate-base: true
          auto-update-conda: true

      - name: Install dependency
        run: |
          conda install jinja2

#      - name: Create environment scpy3.9
#        run: |
#          python .ci/env_create.py -v 3.9 --dev scpy3.9.yml
#          mv .ci/scpy3.9.yml artifact/scpy3.9.yml

      - name: Create environment scpy3.10
        run: |
          python .ci/env_create.py -v 3.10 --dev scpy3.10.yml
          mv .ci/scpy3.10.yml artifact/scpy3.10.yml

      - name: Store artifact
        uses: actions/upload-artifact@v2
        with:
          name: env-artifact
          path: artifact

  # Job 2  (only for non release)
  test-package:

    if: "!startsWith(github.ref, 'refs/release/')"

    name: Test using ${{ matrix.os }} and python ${{ matrix.pythonVersion }}

    needs: create-env-files

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      max-parallel: 4
      matrix:
        os: [ubuntu-latest, windows-latest]
        pythonVersion: ["3.10"]
        # test only 3.10 as 3.8 and 3.9 are at least partially tested in
        # build docs and packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: env-artifact

      - name: Install miniconda (scpy${{ matrix.pythonVersion }})
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: scpy${{ matrix.pythonVersion }}
          environment-file: scpy${{ matrix.pythonVersion }}.yml
          condarc-file: .ci/condarc.yml
          auto-activate-base: false
          auto-update-conda: true

      - name: Install spectrochempy
        run: |
          python setup.py develop

      - name: Initialize CodeClimate variable
        id: vars
        shell: bash
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          # check for CC_TEST_REPORTER_ID availability
          unset HAS_CC_TEST_REPORTER_ID
          if [ ! -z $CC_TEST_REPORTER_ID ]; then HAS_CC_TEST_REPORTER_ID='true' ; fi
          echo set-output name=HAS_CC_TEST_REPORTER_ID::${HAS_CC_TEST_REPORTER_ID}
          echo ::set-output name=HAS_CC_TEST_REPORTER_ID::${HAS_CC_TEST_REPORTER_ID}

      - name: Download CodeClimate reporter
        if: ${{ github.event_name == 'push' && matrix.pythonVersion == '3.10'
          && matrix.os == 'ubuntu-latest' && steps.vars.outputs.HAS_CC_TEST_REPORTER_ID == 'true'}}
        run: |
          # downloading cc-test-reporter
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build

      - name: Test, generate coverage information
        run: |
          coverage run --rcfile=tests/.coveragerc -m pytest -v tests

      - name: Report Coverage info to CodeClimate
        if: ${{ github.event_name == 'push' && matrix.pythonVersion == '3.10'
          && matrix.os == 'ubuntu-latest' && steps.vars.outputs.HAS_CC_TEST_REPORTER_ID == 'true'}}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        run: |
          coverage xml
          ./cc-test-reporter after-build
