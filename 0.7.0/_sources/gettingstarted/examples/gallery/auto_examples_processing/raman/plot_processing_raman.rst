
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_processing/raman/plot_processing_raman.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_processing_raman_plot_processing_raman.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_processing_raman_plot_processing_raman.py:


Processing RAMAN spectra
========================
Various examples of processing RAMAN spectra

.. GENERATED FROM PYTHON SOURCE LINES 14-15

Import API

.. GENERATED FROM PYTHON SOURCE LINES 15-17

.. code-block:: Python

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 18-21

Importing a 1D spectra
----------------------
Define the folder where are the spectra

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: Python

    datadir = scp.preferences.datadir
    ramandir = datadir / "ramandata/labspec"








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Read a single spectrum

.. GENERATED FROM PYTHON SOURCE LINES 26-28

.. code-block:: Python

    A = scp.read_labspec("SMC1-Initial_RT.txt", directory=ramandir)








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Plot the spectrum

.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: Python

    _ = A.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_001.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 33-34

Crop the spectrum to a useful region

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: Python

    B = A[60.0:]
    _ = B.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_002.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 38-44

Baseline correction
-------------------
Let's try to remove the baseline using different methods
For this we use the `Baseline` processor

First, we define the baseline processor

.. GENERATED FROM PYTHON SOURCE LINES 44-46

.. code-block:: Python

    blc = scp.Baseline(log_level="INFO")








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Now we can try the various baseline methods.

.. GENERATED FROM PYTHON SOURCE LINES 50-55

Detrending
~~~~~~~~~~
the `detrend` method is not strictly speaking a method to calculate a bottom line,
but it can be useful as a preprocessing to remove a trend.
Let's define the model to be used for detrending

.. GENERATED FROM PYTHON SOURCE LINES 55-57

.. code-block:: Python

    blc.model = "detrend"








.. GENERATED FROM PYTHON SOURCE LINES 58-61

Now we need to define the order of the detrending either as an integer giving the
degree of the polynomial trend or a string among { `constant` , `linear` ,
`quadratic` , `cubic` }

.. GENERATED FROM PYTHON SOURCE LINES 61-63

.. code-block:: Python

    blc.order = "linear"








.. GENERATED FROM PYTHON SOURCE LINES 64-65

Now we can fit the model to the data

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: Python

    _ = blc.fit(B)








.. GENERATED FROM PYTHON SOURCE LINES 68-69

The baseline is now stored in the `baseline` attribute of the processor

.. GENERATED FROM PYTHON SOURCE LINES 69-73

.. code-block:: Python

    corr = blc.transform()
    baseline = blc.baseline









.. GENERATED FROM PYTHON SOURCE LINES 74-78

Let's plot the result of the correction

As we will use this type of plot several times,
we define a function for it

.. GENERATED FROM PYTHON SOURCE LINES 78-89

.. code-block:: Python

    def plot_result(X, Xc, bas):
        Xcm = Xc.min()
        Xcp = Xc.ptp()
        offset = Xcm + Xcp
        (Xc - Xcm).plot()
        (X + offset).plot(clear=False, color="g", linestyle="-")
        (bas + offset).plot(clear=False, color="r", linestyle="--")


    plot_result(B, corr, baseline)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_003.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-91

Let's try with a polynomial detrend of order 2

.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: Python

    blc.order = 2  # quadratic detrending
    blc.fit(B)
    corr = blc.transform()
    baseline = blc.baseline
    plot_result(B, corr, baseline)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_004.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 98-102

Ok this is a good start.
But we can do better with more specific baseline correction methods.
Let's try the asymmetric least squares smoothing model ( `asls` ), on this detrended
spectrum:

.. GENERATED FROM PYTHON SOURCE LINES 102-104

.. code-block:: Python

    Bd = blc.corrected








.. GENERATED FROM PYTHON SOURCE LINES 105-107

Asymmetric Least Squares smoothing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: Python

    blc.model = "asls"








.. GENERATED FROM PYTHON SOURCE LINES 110-114

We need to define the smoothness and asymmetry parameters. The smoothness parameter is
a positive number that controls the smoothness of the baseline. The larger this number
is, the smoother the resulting baseline. The asymmetry parameter controls the
asymmetry for the AsLS resolution.

.. GENERATED FROM PYTHON SOURCE LINES 114-117

.. code-block:: Python

    blc.lamb = 10**8  # smoothness
    blc.asymmetry = 0.01








.. GENERATED FROM PYTHON SOURCE LINES 118-119

Now we can fit the model to the data

.. GENERATED FROM PYTHON SOURCE LINES 119-124

.. code-block:: Python

    blc.fit(Bd)
    corr = blc.transform()
    baseline = blc.baseline
    plot_result(Bd, corr, baseline)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_005.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 125-128

The correction appears to be good, but let's see if we can do better by using the
`snip` method. This method requires to adjust the width of a window (usually set to
the FWHM of the characteristic peaks).

.. GENERATED FROM PYTHON SOURCE LINES 128-136

.. code-block:: Python

    blc.model = "snip"
    blc.snip_width = 55  # estimated FWHM of the peaks (expressed in point. TODO: alternatively use true coordinates)
    Bs = A[55.0:]
    blc.fit(Bs)
    corr = blc.transform()
    baseline = blc.baseline
    plot_result(Bs, corr, baseline)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_006.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 137-140

Baseline correction 2D spectra (series of spectra)
--------------------------------------------------
First, we read the series of spectra

.. GENERATED FROM PYTHON SOURCE LINES 140-145

.. code-block:: Python


    C = scp.read_labspec("Activation.txt", directory=ramandir)
    # C = C[20:]  # discard the first 20 spectra
    _ = C.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_007.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 146-152

Now we apply the AsLS method on the series of spectra

We keep the same parameters as before and fit the new dataset
The baseline is calculated for each spectrum of the series. So the process is
very slow!  For the demonstration we will the limit the series to 1 spectrum
over 10.

.. GENERATED FROM PYTHON SOURCE LINES 152-162

.. code-block:: Python


    blc.model = "asls"
    blc.log_level = (
        "WARNING"  # supress output of asls (to long for the moment:  TODO optimize this)
    )
    blc.fit(C[::10])
    corr = blc.transform()
    baseline = blc.baseline
    _ = corr.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_008.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 163-164

or the `snip` method (which is much faster)

.. GENERATED FROM PYTHON SOURCE LINES 164-170

.. code-block:: Python

    blc.model = "snip"
    blc.fit(C)
    corr = blc.transform()
    baseline = blc.baseline
    _ = corr[::10].plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_009.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 171-173

Denoising
---------

.. GENERATED FROM PYTHON SOURCE LINES 173-178

.. code-block:: Python

    D = corr.copy()
    G = scp.denoise(D, ratio=98)

    _ = G[::10].plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_010.png
   :alt: plot processing raman
   :srcset: /gettingstarted/examples/gallery/auto_examples_processing/raman/images/sphx_glr_plot_processing_raman_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 179-181

This ends the example ! The following line can be removed or commented
when the example is run as a notebook (`.ipynb`).

.. GENERATED FROM PYTHON SOURCE LINES 181-183

.. code-block:: Python


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.215 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_processing_raman_plot_processing_raman.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_processing_raman.ipynb <plot_processing_raman.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_processing_raman.py <plot_processing_raman.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_processing_raman.zip <plot_processing_raman.zip>`
