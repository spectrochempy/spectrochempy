
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/plot_fit.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_fit.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_fit.py:


Fitting 1D dataset
------------------
In this example, we find the least  square solution of a simple linear
equation.

.. GENERATED FROM PYTHON SOURCE LINES 17-18

.. code-block:: default









.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default

    import os

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Let's take an IR spectrum

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default


    nd = scp.NDDataset.read_omnic(os.path.join("irdata", "nh4y-activation.spg"))








.. GENERATED FROM PYTHON SOURCE LINES 30-31

and select only the OH region:

.. GENERATED FROM PYTHON SOURCE LINES 31-36

.. code-block:: default

    ndOH = nd[54, 3800.0:3300.0]
    # masking
    ndOH[:, 3505.0:3500.0] = scp.MASKED
    _ = ndOH.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_001.png
   :alt: plot fit
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 37-39

Perform a Fit
Fit parameters are defined in a script (a single text as below)

.. GENERATED FROM PYTHON SOURCE LINES 39-76

.. code-block:: default

    script = """
    #-----------------------------------------------------------
    # syntax for parameters definition:
    # name: value, low_bound,  high_bound
    # available prefix:
    #  # for comments
    #  * for fixed parameters
    #  $ for variable parameters
    #  > for reference to a parameter in the COMMON block
    #    (> is forbidden in the COMMON block)
    # common block parameters should not have a _ in their names
    #-----------------------------------------------------------
    #

    COMMON:
    # common parameters ex.
    # $ gwidth: 1.0, 0.0, none
    $ gratio: 0.1, 0.0, 1.0

    MODEL: LINE_1
    shape: asymmetricvoigtmodel
        * ampl:  1.1, 0.0, none
        $ pos:   3620, 3400.0, 3700.0
        $ ratio: 0.0147, 0.0, 1.0
        $ asym: 0.1, 0, 1
        $ width: 50, 0, 1000

    MODEL: LINE_2
    shape: asymmetricvoigtmodel
        $ ampl:  0.8, 0.0, none
        $ pos:   3540, 3400.0, 3700.0
        > ratio: gratio
        $ asym: 0.1, 0, 1
        $ width: 50, 0, 1000

    """








.. GENERATED FROM PYTHON SOURCE LINES 77-78

create an Optimize object

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: default

    f1 = scp.Optimize(log_level="INFO")








.. GENERATED FROM PYTHON SOURCE LINES 81-83

Show plot and the starting model using the dry parameters (of course it is advisable
to be as close as possible of a good expectation

.. GENERATED FROM PYTHON SOURCE LINES 83-97

.. code-block:: default

    f1.script = script

    # set dry and continue to show starting model
    # reset dry and continue to show starting model
    f1.dry = True
    f1.autobase = True
    f1.fit(ndOH)

    # get some information
    scp.info_(f"numbers of components: {f1.n_components}")
    ndOH.plot()
    ax = (f1.components[:]).plot(clear=False)
    ax.autoscale(enable=True, axis="y")




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_002.png
   :alt: plot fit
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

             **************************************************
     Starting parameters:
     **************************************************

     COMMON:
            $ gratio:     0.1000, 0.0, 1.0

     MODEL: line_1
     shape: asymmetricvoigtmodel
            * ampl:     1.1000, 0.0, none
            $ asym:     0.1000, 0, 1
            $ pos:  3620.0000, 3400.0, 3700.0
            $ ratio:     0.0147, 0.0, 1.0
            $ width:    50.0000, 0, 1000

     MODEL: line_2
     shape: asymmetricvoigtmodel
            $ ampl:     0.8000, 0.0, none
            $ asym:     0.1000, 0, 1
            $ pos:  3540.0000, 3400.0, 3700.0
            > ratio:gratio
            $ width:    50.0000, 0, 1000

     numbers of components: 2




.. GENERATED FROM PYTHON SOURCE LINES 98-99

Now perform a fit with maximum 1000 iterations

.. GENERATED FROM PYTHON SOURCE LINES 99-102

.. code-block:: default

    f1.max_iter = 1000
    _ = f1.fit(ndOH)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

             **************************************************
     Result:
     **************************************************

     COMMON:
            $ gratio:     0.3458, 0.0, 1.0

     MODEL: line_1
     shape: asymmetricvoigtmodel
            * ampl:     1.1000, 0.0, none
            $ asym:     0.7716, 0, 1
            $ pos:  3623.4044, 3400.0, 3700.0
            $ ratio:     0.4394, 0.0, 1.0
            $ width:    43.5995, 0, 1000

     MODEL: line_2
     shape: asymmetricvoigtmodel
            $ ampl:     0.9001, 0.0, none
            $ asym:     1.0000, 0, 1
            $ pos:  3536.9977, 3400.0, 3700.0
            > ratio:gratio
            $ width:    79.4888, 0, 1000





.. GENERATED FROM PYTHON SOURCE LINES 103-104

Show the result

.. GENERATED FROM PYTHON SOURCE LINES 104-108

.. code-block:: default

    ndOH.plot()
    ax = (f1.components[:]).plot(clear=False)
    ax.autoscale(enable=True, axis="y")




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_003.png
   :alt: plot fit
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 109-110

plotmerit

.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: default

    som = f1.inverse_transform()
    _ = f1.plotmerit(ndOH, som, method="scatter", markevery=5, markersize=2, lw=2)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_004.png
   :alt: Optimize plot of merit
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_fit_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 114-116

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 116-118

.. code-block:: default


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.004 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_fit.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_fit.py <plot_fit.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_fit.ipynb <plot_fit.ipynb>`
