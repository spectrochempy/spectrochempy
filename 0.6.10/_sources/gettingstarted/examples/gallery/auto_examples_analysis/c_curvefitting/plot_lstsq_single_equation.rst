
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/plot_lstsq_single_equation.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_lstsq_single_equation.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_lstsq_single_equation.py:


Solve a linear equation using LSTSQ
===================================

In this example, we find the least  square solution of a simple linear
equation.

.. GENERATED FROM PYTHON SOURCE LINES 16-17

.. code-block:: default









.. GENERATED FROM PYTHON SOURCE LINES 19-21

.. code-block:: default

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 22-27

Let's take a similar example to the one given in the `numpy.linalg`
documentation

We have some noisy data that represent the distance `d` traveled by some
objects versus time `t`:

.. GENERATED FROM PYTHON SOURCE LINES 27-31

.. code-block:: default


    time = [0, 1, 2, 3]
    distance = [-1, 0.2, 0.9, 2.1]








.. GENERATED FROM PYTHON SOURCE LINES 32-36

### 1) Using arrays (or list) inputs

We would like v and d0 such as
   distance = v.time + d0

.. GENERATED FROM PYTHON SOURCE LINES 36-43

.. code-block:: default

    lstsq = scp.LSTSQ()
    lstsq.fit(time, distance)
    v = lstsq.coef
    d0 = lstsq.intercept
    rsquare = lstsq.score()
    v, d0, rsquare





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/spectrochempy/tempdirs/scp_deem6uhy/spectrochempy/analysis/_base/_analysisbase.py:1262: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)
      A = float(self._linear_regression.coef_)

    (0.9999999999999997, -0.9499999999999995, 0.9900990099009901)



.. GENERATED FROM PYTHON SOURCE LINES 44-46

Plot
(we need to import the matplotlib library)

.. GENERATED FROM PYTHON SOURCE LINES 46-56

.. code-block:: default

    import matplotlib.pyplot as plt

    plt.plot(time, distance, "o", label="Original data", markersize=5)
    distance_fitted = lstsq.predict()
    plt.plot(time, distance_fitted, ":r", label="Linear regression output")
    plt.xlabel("time / h")
    plt.ylabel("distance / km")
    plt.title(f"Linear regression, $R^2={rsquare:.3f}$")
    plt.legend()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_001.png
   :alt: Linear regression, $R^2=0.990$
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fa29d54c1f0>



.. GENERATED FROM PYTHON SOURCE LINES 57-62

### 2) Using NDDataset as input for X and Y

Using NDDataset as input offer the straightforward possibility to use metadata
such as units in the calculation and coordset


.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    time = scp.NDDataset([0, 1, 2, 3], title="time", units="hour")
    distance = scp.NDDataset([-1, 0.2, 0.9, 2.1], title="distance", units="kilometer")








.. GENERATED FROM PYTHON SOURCE LINES 66-67

we fit it using the new defined time and distance NDDatasets

.. GENERATED FROM PYTHON SOURCE LINES 67-76

.. code-block:: default

    lstsq = scp.LSTSQ()
    lstsq.fit(time, distance)

    # The results are the same as previously (but with units information)
    v = lstsq.coef
    d0 = lstsq.intercept
    rsquare = lstsq.score()
    print(f"speed : {v: .2f},  d0 : {d0: .2f},  r^2={rsquare: .3f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/spectrochempy/tempdirs/scp_deem6uhy/spectrochempy/analysis/_base/_analysisbase.py:1262: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)
      A = float(self._linear_regression.coef_)
    speed :  1.00 kilometer hour^-1,  d0 : -0.95 kilometer,  r^2= 0.990




.. GENERATED FROM PYTHON SOURCE LINES 77-78

Predict return a NDDataset since the inputs were NDDatasets

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: default

    distance_fitted2 = lstsq.predict()
    print(distance_fitted2)

    assert (distance_fitted == distance_fitted2.data).all()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NDDataset: [float64] km (size: 4)




.. GENERATED FROM PYTHON SOURCE LINES 84-89

### 3) Using a single NDDataset with X coordinates as input

Using NDDataset as input offer the straightforward possibility to use the X coordinate
directly, ie., we use lstsq.fit(Y) with Y.x = X, instead of lstsq.fit(X, Y)


.. GENERATED FROM PYTHON SOURCE LINES 89-94

.. code-block:: default

    time = scp.Coord([0, 1, 2, 3], title="time", units="hour")
    distance = scp.NDDataset(
        data=[-1, 0.2, 0.9, 2.1], coordset=[time], title="distance", units="kilometer"
    )








.. GENERATED FROM PYTHON SOURCE LINES 95-98

Now we fit the model,
but here we just need to pass the distance dataset as argument.
The time information being the x coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 98-107

.. code-block:: default

    lstsq = scp.LSTSQ()
    lstsq.fit(distance)

    # The results are the same as previously.
    v = lstsq.coef
    d0 = lstsq.intercept
    rsquare = lstsq.score()
    print(f"speed : {v:.2f~C},  d0 : {d0:.2f~C},  r^2={rsquare:.3f}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/runner/work/spectrochempy/tempdirs/scp_deem6uhy/spectrochempy/analysis/_base/_analysisbase.py:1262: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)
      A = float(self._linear_regression.coef_)
    speed : 1.00 km*h**-1,  d0 : -0.95 km,  r^2=0.990




.. GENERATED FROM PYTHON SOURCE LINES 108-109

Final plot

.. GENERATED FROM PYTHON SOURCE LINES 109-119

.. code-block:: default

    distance.plot_scatter(
        markersize=10,
        mfc="red",
        mec="black",
        label="Original data",
        title=f"Least-square regression, $r^2={rsquare:.3f}$",
    )
    distance_fitted3 = lstsq.predict()
    distance_fitted3.plot_pen(clear=False, color="g", label="Fitted line", legend=True)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_002.png
   :alt: Least-square regression, $r^2=0.990$
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/c_curvefitting/images/sphx_glr_plot_lstsq_single_equation_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <_Axes: title={'center': 'Least-square regression, $r^2=0.990$'}, xlabel='time $\\mathrm{/\\ \\mathrm{h}}$', ylabel='distance $\\mathrm{/\\ \\mathrm{km}}$'>



.. GENERATED FROM PYTHON SOURCE LINES 120-122

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 122-124

.. code-block:: default


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.316 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_c_curvefitting_plot_lstsq_single_equation.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_lstsq_single_equation.py <plot_lstsq_single_equation.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_lstsq_single_equation.ipynb <plot_lstsq_single_equation.ipynb>`
