
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/plot_mcrals_kinetics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_mcrals_kinetics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_mcrals_kinetics.py:


MCR-ALS with kinetic constraints
================================

In this example, we perform the MCR ALS optimization of the UV-vis of spectra resulting
from a three-component reaction `A` \-> `B` \-> `C` which was investigated by UVâ€“Vis
spectroscopy. Full details on the reaction and data acquisition conditions can be found
in :cite:t:`bijlsma:2001` .
The data can be downloded from the author website `Biosystems Data Analysis group
University of Amsterdam
<http://www.bdagroup.nl/content/Downloads/datasets/datasets.php>`__
(Copyright 2005 Biosystems Data Analysis Group ; Universiteit van Amsterdam ). For the user convenience,
# this dataset is present in the 'datadir' of spectrochempy in 'matlabdata/METING9.MAT'.

.. GENERATED FROM PYTHON SOURCE LINES 22-27

.. code-block:: default


    import numpy as np

    import spectrochempy as scp








.. GENERATED FROM PYTHON SOURCE LINES 28-31

Loading a NDDataset
-------------------
Load the data with the `read` function.

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: default

    ds = scp.read("matlabdata/METING9.MAT")








.. GENERATED FROM PYTHON SOURCE LINES 34-38

This file contains a pair of datasets. The first dataset contains the time in seconds since the start of the reaction
(t=0). The second dataset contains the UV-VIS spectra of the reaction mixture, recorded at different time points.
The first column of the matrix contains the wavelength axis and the remaining columns
are the measured UV-VIS spectra (wavelengths x timepoints)

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: default

    print("\n NDDataset names: " + str([d.name for d in ds]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


     NDDataset names: ['RelTime', 'x9b']




.. GENERATED FROM PYTHON SOURCE LINES 41-43

We load the experimental spectra (in `ds[1]`\), add the `y` (time) and `x`
(wavelength) coordinates, and keep one spectrum of out 4:

.. GENERATED FROM PYTHON SOURCE LINES 43-49

.. code-block:: default

    D = scp.NDDataset(ds[1][:, 1:].data.T)
    D.y = scp.Coord(ds[0].data.squeeze(), title="time") / 60
    D.x = scp.Coord(ds[1][:, 0].data.squeeze(), title="wavelength / cm$^{-1}$")
    D = D[::4]
    _ = D.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_001.png
   :alt: plot mcrals kinetics
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-51

A first estimate of the concentrations can be obtained by EFA:

.. GENERATED FROM PYTHON SOURCE LINES 51-59

.. code-block:: default

    print("compute EFA...")
    efa = scp.EFA()
    efa.fit(D[:, 300.0:500.0])
    efa.n_components = 3
    C0 = efa.transform()
    C0 = C0 / C0.max(dim="y") * 5.0
    _ = C0.T.plot()




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_002.png
   :alt: plot mcrals kinetics
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    compute EFA...




.. GENERATED FROM PYTHON SOURCE LINES 60-62

We can get a better estimate of the concentration (C) and pure spectra profiles (St)
by soft MCR-ALS:

.. GENERATED FROM PYTHON SOURCE LINES 62-68

.. code-block:: default

    mcr_1 = scp.MCRALS(log_level="INFO")
    _ = mcr_1.fit(D, C0)

    _ = mcr_1.C.T.plot()
    _ = mcr_1.St.plot()




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_003.png
         :alt: plot mcrals kinetics
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_004.png
         :alt: plot mcrals kinetics
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_004.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

     Concentration profile initialized with 3 components
     Initial spectra profile computed
     ***           ALS optimisation log            ***
     #iter     RSE / PCA        RSE / Exp      %change
     -------------------------------------------------
       1        0.002867        0.005886      -99.284101
       2        0.002813        0.005863       -0.390168
       3        0.002810        0.005861       -0.020846
     converged !




.. GENERATED FROM PYTHON SOURCE LINES 69-72

Kinetic constraints can be added, i.e., imposing that the concentration profiles obey
a kinetic model. To do so we first define an ActionMAssKinetics object with
roughly estimated rate constants:

.. GENERATED FROM PYTHON SOURCE LINES 72-77

.. code-block:: default

    reactions = ("A -> B", "B -> C")
    species_concentrations = {"A": 5.0, "B": 0.0, "C": 0.0}
    k0 = np.array((0.5, 0.05))
    kin = scp.ActionMassKinetics(reactions, species_concentrations, k0)








.. GENERATED FROM PYTHON SOURCE LINES 78-80

The concentration profile obtained with this approximate model can be computed and
compared with those of the soft MCR-ALS:

.. GENERATED FROM PYTHON SOURCE LINES 80-84

.. code-block:: default

    Ckin = kin.integrate(D.y.data)
    _ = mcr_1.C.T.plot(linestyle="-", cmap=None)
    _ = Ckin.T.plot(clear=False, cmap=None)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_005.png
   :alt: plot mcrals kinetics
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 85-86

Even though very approximate, the same values can be used to run a hard-soft MCR-ALS:

.. GENERATED FROM PYTHON SOURCE LINES 86-96

.. code-block:: default

    X = D[:, 300.0:500.0]
    param_to_optimize = {"k[0]": 0.5, "k[1]": 0.05}
    mcr_2 = scp.MCRALS()
    mcr_2.hardConc = [0, 1, 2]
    mcr_2.getConc = kin.fit_to_concentrations
    mcr_2.argsGetConc = ([0, 1, 2], [0, 1, 2], param_to_optimize)
    mcr_2.kwargsGetConc = {"ivp_solver_kwargs": {"return_NDDataset": False}}

    mcr_2.fit(X, Ckin)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Optimization of the parameters.
             Initial parameters: [     0.5     0.05]
             Initial function value: 0.000000
    Optimization terminated successfully.
             Current function value: 0.000000
             Iterations: 17
             Function evaluations: 35
             Optimization time: 0:00:00.112232
             Final parameters: [     0.5     0.05]
    Optimization of the parameters.
             Initial parameters: [     0.5     0.05]
             Initial function value: 7.032662
    Optimization terminated successfully.
             Current function value: 4.004007
             Iterations: 27
             Function evaluations: 54
             Optimization time: 0:00:00.153319
             Final parameters: [  0.3821  0.05042]
    Optimization of the parameters.
             Initial parameters: [  0.3821  0.05042]
             Initial function value: 3.051183
    Optimization terminated successfully.
             Current function value: 2.293919
             Iterations: 23
             Function evaluations: 45
             Optimization time: 0:00:00.126373
             Final parameters: [  0.3388  0.05039]
    Optimization of the parameters.
             Initial parameters: [  0.3388  0.05039]
             Initial function value: 2.022835
    Optimization terminated successfully.
             Current function value: 1.749865
             Iterations: 22
             Function evaluations: 43
             Optimization time: 0:00:00.119944
             Final parameters: [   0.317  0.05021]
    Optimization of the parameters.
             Initial parameters: [   0.317  0.05021]
             Initial function value: 1.551980
    Optimization terminated successfully.
             Current function value: 1.403400
             Iterations: 22
             Function evaluations: 43
             Optimization time: 0:00:00.117887
             Final parameters: [  0.3029  0.04998]

    <spectrochempy.analysis.decomposition.mcrals.MCRALS object at 0x7fa29a7f7df0>



.. GENERATED FROM PYTHON SOURCE LINES 97-100

Now, let\'s compare the concentration profile of MCR-ALS
(C = X(C$_{kin}^+$ X)$^+$) with
that of the optimized kinetic model (C$_{kin}$ \equiv$ `C_constrained`):

.. GENERATED FROM PYTHON SOURCE LINES 100-105

.. code-block:: default



    _ = mcr_2.C.T.plot()
    _ = mcr_2.C_constrained.T.plot(clear=False)




.. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_006.png
   :alt: plot mcrals kinetics
   :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 107-109

Finally, let\'s plot some of the pure spectra profiles St, and the
 reconstructed dataset  (X_hat = C St) vs original dataset (X) and residuals.

.. GENERATED FROM PYTHON SOURCE LINES 109-112

.. code-block:: default

    _ = mcr_2.St.plot()
    _ = mcr_2.plotmerit(nb_traces=10)




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_007.png
         :alt: plot mcrals kinetics
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_007.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_008.png
         :alt: MCRALS plot of merit
         :srcset: /gettingstarted/examples/gallery/auto_examples_analysis/a_decomposition/images/sphx_glr_plot_mcrals_kinetics_008.png
         :class: sphx-glr-multi-img





.. GENERATED FROM PYTHON SOURCE LINES 113-115

This ends the example ! The following line can be uncommented if no plot shows when
running the .py script with python

.. GENERATED FROM PYTHON SOURCE LINES 115-117

.. code-block:: default


    # scp.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.646 seconds)


.. _sphx_glr_download_gettingstarted_examples_gallery_auto_examples_analysis_a_decomposition_plot_mcrals_kinetics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_mcrals_kinetics.py <plot_mcrals_kinetics.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_mcrals_kinetics.ipynb <plot_mcrals_kinetics.ipynb>`
